>>> fabric-contract-api
npm run test:unit && npm run test:schema 

> fabric-contract-api@2.0.0-snapshot test:unit /home/matthew/go/src/github.com/hyperledger/fabric-chaincode-node/apis/fabric-contract-api
> npm run test


> fabric-contract-api@2.0.0-snapshot test /home/matthew/go/src/github.com/hyperledger/fabric-chaincode-node/apis/fabric-contract-api
> nyc mocha --recursive 'test/unit/**/*.js'



  Default.js
    Default
2019-09-16T10:33:54.210Z INFO [./lib/annotations/default.js] @Default args: Target -> mockTarget 
      ✓ should add set value for default when none set
2019-09-16T10:33:54.218Z INFO [./lib/annotations/default.js] @Default args: Target -> mockTarget 
      ✓ should error when default already set

  Info.js
    Info
2019-09-16T10:33:54.220Z INFO [./lib/annotations/info.js] @Info args: Info -> [object Object], Target -> steve 
      ✓ should add object as key when no objects exist for global yet
2019-09-16T10:33:54.221Z INFO [./lib/annotations/info.js] @Info args: Info -> [object Object], Target -> steve 
      ✓ should add object as key when objects exist for global
    Info with data
2019-09-16T10:33:54.222Z INFO [./lib/annotations/info.js] @Info args: Info -> [object Object], Target -> steve 
      ✓ should add object as key when no objects exist for global yet
2019-09-16T10:33:54.223Z INFO [./lib/annotations/info.js] @Info args: Info -> [object Object], Target -> steve 
      ✓ should add object as key when objects exist for global

  Object.js
    #Object
2019-09-16T10:33:54.225Z INFO [./lib/annotations/object.js] @Object args: Target -> steve 
      ✓ should add object as key when no objects exist for global yet
2019-09-16T10:33:54.226Z INFO [./lib/annotations/object.js] @Object args: Target -> steve 
      ✓ should add object as key when objects exist for global
    #Property
2019-09-16T10:33:54.227Z INFO [./lib/annotations/object.js] @Property args: Property Key -> undefined, Name -> some name, Type -> SoMe tYPe, Target -> Object 
      ✓ should use the type and name passed
2019-09-16T10:33:54.228Z INFO [./lib/annotations/object.js] @Property args: Property Key -> some key, Name -> some name, Type -> undefined, Target -> Object 
      ✓ should handle the reflected type being a function when type not passed and is function
2019-09-16T10:33:54.229Z INFO [./lib/annotations/object.js] @Property args: Property Key -> some key, Name -> undefined, Type -> undefined, Target -> Object 
      ✓ should handle the reflected type being a function when type not passed and is not function

  Transaction.js
    Transaction
2019-09-16T10:33:54.232Z INFO [./lib/annotations/transaction.js] @Transaction args: Property Key -> mockKey, Commit -> true, Target -> Object 
      ✓ should handle existing transactions
2019-09-16T10:33:54.234Z INFO [./lib/annotations/transaction.js] @Transaction args: Property Key -> mockKey, Commit -> true, Target -> Object 
      ✓ should handle existing transactions of which matches name and already has param metadata
2019-09-16T10:33:54.236Z INFO [./lib/annotations/transaction.js] @Transaction args: Property Key -> mockKey, Commit -> true, Target -> Object 
      ✓ should create new metadata for fabric:transactions if none exist and handle no params
2019-09-16T10:33:54.237Z INFO [./lib/annotations/transaction.js] @Transaction args: Property Key -> mockKey, Commit -> false, Target -> Object 
      ✓ should not add a tag if commit is false
    Returns
2019-09-16T10:33:54.239Z INFO [./lib/annotations/transaction.js] @Returns args: , Property Key -> mockKey, Return Type -> someType, Target -> Object 
      ✓ should handle existing transactions
2019-09-16T10:33:54.240Z INFO [./lib/annotations/transaction.js] @Returns args: , Property Key -> mockKey, Return Type -> someType, Target -> Object 
      ✓ should handle when there are no existing transactions
    Param
2019-09-16T10:33:54.242Z INFO [./lib/annotations/transaction.js] @Param args: Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> some description, Target -> Object 
      ✓ should overwrite when the transaction exists and param of name already in
2019-09-16T10:33:54.245Z INFO [./lib/annotations/transaction.js] @Param args: Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> some description, Target -> Object 
      ✓ should overwrite existing transaction but add new param when one with name does not exist
2019-09-16T10:33:54.246Z INFO [./lib/annotations/transaction.js] @Param args: Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> some description, Target -> Object 
      ✓ should append to transaction a new parameters array when transaction exists but has not parameters field
2019-09-16T10:33:54.248Z INFO [./lib/annotations/transaction.js] @Param args: Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> some description, Target -> Object 
      ✓ should handle when no transaction exists
2019-09-16T10:33:54.249Z INFO [./lib/annotations/transaction.js] @Param args: Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> undefined, Target -> Object 
      ✓ should handle when no description passed

  utils
    appendOrUpdate
      ✓ should push a new object into array made up of data passed if none existing with id
      ✓ should update existing object with data if id exists
    findByValue
      ✓ should return the element in the array with the passed value in the passed field
      ✓ should return null if no element has the passed value for the passed field
    generateSchema
      ✓ should return a primitive type
      ✓ should return a primitive type as lowercase
      ✓ should return a ref path for a non array and non primitive type
      ✓ should return a ref path for a non array and non primitive type and not use full path
      ✓ should recurse for array types
      ✓ should recurse for map types

  contract.js
    #constructor
      ✓ should create plain object ok
      ✓ should have set* methods

  contract.js
    #constructor
2019-09-16T10:33:54.257Z INFO [./lib/contract.js] Creating new Contract 
2019-09-16T10:33:54.257Z INFO [./lib/contract.js] Creating new Contract 
2019-09-16T10:33:54.257Z INFO [./lib/contract.js] Creating new Contract    
      ✓ should create with default name
2019-09-16T10:33:54.258Z INFO [./lib/contract.js] Creating new Contract 
      ✓ should have default unknownTx fn
2019-09-16T10:33:54.260Z INFO [./lib/contract.js] Creating new Contract brain.size.planet.smart 
2019-09-16T10:33:54.260Z INFO [./lib/contract.js] Creating new Contract    somewhat.padded.out  
2019-09-16T10:33:54.260Z INFO [./lib/contract.js] Creating new Contract 
      ✓ should create with the name specified
2019-09-16T10:33:54.260Z INFO [./lib/contract.js] Creating new Contract 
      ✓ should call the default before/after functions
2019-09-16T10:33:54.261Z INFO [./lib/contract.js] Creating new Contract 
      ✓ should call the default createContext functions
2019-09-16T10:33:54.261Z INFO [./lib/contract.js] Creating new Contract 
      ✓ should set the __isContract value
    _isContract
2019-09-16T10:33:54.262Z INFO [./lib/contract.js] Creating new Contract alpha.beta.delta 
      ✓ should return true when class is a contract
      ✓ should return true when class is not a contract
      ✓ should return true when class is not instanceOf contract but does have __isContract true
    subclass specific functioning
2019-09-16T10:33:54.264Z INFO [./lib/contract.js] Creating new Contract alpha.beta.delta 
      ✓ should set the correct name
2019-09-16T10:33:54.265Z INFO [./lib/contract.js] Creating new Contract alpha.beta.delta 
      ✓ should call the correct subclassed fns

  jsontransactionserializer.js
    #constructor
      ✓ should create plain object ok
    #toBuffer
      ✓ should return undefined if nothing passed in (no schema) 
2019-09-16T10:33:54.267Z INFO [./lib/jsontransactionserializer.js] undefined toBuffer has no schema/lacks sufficient schema to validate against 
2019-09-16T10:33:54.267Z INFO [./lib/jsontransactionserializer.js] undefined toBuffer has no schema/lacks sufficient schema to validate against 
2019-09-16T10:33:54.268Z INFO [./lib/jsontransactionserializer.js] undefined toBuffer has no schema/lacks sufficient schema to validate against 
2019-09-16T10:33:54.268Z INFO [./lib/jsontransactionserializer.js] undefined toBuffer has no schema/lacks sufficient schema to validate against 
      ✓ should return stringifed result (no schema)
      ✓ should return string from a string in result if schema given
      ✓ should return number from a number in result if schema given
      ✓ should throw an error if the type of data passed does not match schema given
2019-09-16T10:33:54.269Z INFO [./lib/jsontransactionserializer.js] undefined toBuffer has no schema/lacks sufficient schema to validate against 
2019-09-16T10:33:54.269Z INFO [./lib/jsontransactionserializer.js] undefined toBuffer has no schema/lacks sufficient schema to validate against 
      ✓ should handle booleans
    #fromBuffer
      ✓ should throw an error if nothing given
      ✓ should throw an error if not a number
      ✓ should throw an error if bad boolean given
      ✓ should throw an error if bad JSON used for non string or number type
      ✓ should return inflated data from the buffer
      ✓ should handle specific String case
      ✓ should handle specific Number case
      ✓ should handle specific Number case
      ✓ should handle booleans
      ✓ should handle errors of unkown type

  Logger
    getLogger
      ✓ should create a new logger name unknown
      ✓ should return existing logger if known name used
      ✓ should set the log level to fatal when env var set to CRITICAL
      ✓ should set the log level to error when env var set to ERROR
      ✓ should set the log level to warn when env var set to WARNING
      ✓ should set the log level to debug when env var set to DEBUG
    formatter
      ✓ 
      ✓ 


  70 passing (81ms)


=============================== Coverage summary ===============================
Statements   : 95.31% ( 244/256 )
Branches     : 100% ( 126/126 )
Functions    : 97.78% ( 44/45 )
Lines        : 95.29% ( 243/255 )
================================================================================

> fabric-contract-api@2.0.0-snapshot test:schema /home/matthew/go/src/github.com/hyperledger/fabric-chaincode-node/apis/fabric-contract-api
> ajv compile -s ./schema/contract-schema.json && ajv validate -s ./schema/contract-schema.json -d ./schema/example-full.json

schema ./schema/contract-schema.json is valid
./schema/example-full.json valid
